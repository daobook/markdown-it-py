# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, executable book project
# This file is distributed under the same license as the markdown-it-py
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: markdown-it-py \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-17 13:52+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../architecture.md:3
msgid "markdown-it design principles"
msgstr "markdown-it 设计原则"

#: ../../architecture.md:5
msgid "Data flow"
msgstr "数据流"

#: ../../architecture.md:7
msgid ""
"Input data is parsed via nested chains of rules. There are 3 nested "
"chains - `core`, `block` & `inline`:"
msgstr ""
"输入数据是通过规则的嵌套链来解析的。"
"有 3 条嵌套链 - `core`、`block` 和 `inline`："

#: ../../architecture.md:35
msgid ""
"The result of the parsing is a *list of tokens*, that will be passed to "
"the `renderer` to generate the html content."
msgstr ""
"解析的结果是一个 *形符列表*，它将被传递给 `renderer` 以生成 html 内容。"

#: ../../architecture.md:37
msgid ""
"These tokens can be themselves parsed again to generate more tokens (ex: "
"a `list token` can be divided into multiple `inline tokens`)."
msgstr ""
"这些形符本身可以再次被解析以产生更多的形符"
"（例如：一个 `list token` 可以被分成多个 `inline tokens`）。"

#: ../../architecture.md:39
msgid ""
"An `env` sandbox can be used alongside tokens to inject external "
"variables for your parsers and renderers."
msgstr ""
"一个 `env` 沙盒可以和形符一起使用，为你的解析器和渲染器注入外部变量。"

#: ../../architecture.md:41
msgid ""
"Each chain (core / block / inline) uses an independent `state` object "
"when parsing data, so that each parsing operation is independent and can "
"be disabled on the fly."
msgstr ""
"每条链（core / block / inline）在解析数据时都使用一个独立的 `state` 对象，"
"因此每个解析操作都是独立的，可以即时禁用。"

#: ../../architecture.md:44
msgid "Token stream"
msgstr "形符流"

#: ../../architecture.md:46
msgid ""
"Instead of traditional AST we use more low-level data representation - "
"*tokens*. The difference is simple:"
msgstr ""
"代替传统的 AST，我们使用更低级的数据表示-- *形符*。其区别很简单："

#: ../../architecture.md:49
msgid "Tokens are a simple sequence (Array)."
msgstr "形符是一个简单的序列（Array）。"

#: ../../architecture.md:50
msgid "Opening and closing tags are separate."
msgstr "开头和结尾标记是分开的。"

#: ../../architecture.md:51
msgid ""
"There are special token objects, \"inline containers\", having nested "
"tokens. sequences with inline markup (bold, italic, text, ...)."
msgstr ""
"有一些特殊的形符对象，即 \"内联容器\"，具有嵌套的形符。"
"具有内联标记的序列（粗体、斜体、文本，......）。"

#: ../../architecture.md:54
msgid ""
"See [token class](https://github.com/executablebooks/markdown-it-"
"py/tree/master/markdown_it/token.py) for details about each token "
"content."
msgstr ""
"参见 [形符类](https://github.com/executablebooks/markdown-it-py/"
"tree/master/markdown_it/token.py)，了解每个形符内容的详情。"

#: ../../architecture.md:57
msgid "In total, a token stream is:"
msgstr "总的来说，一个形符流是："

#: ../../architecture.md:59
msgid "On the top level - array of paired or single \"block\" tokens:"
msgstr "在顶层 -- 成对的或单一的 \"block\" 形符数组。"

#: ../../architecture.md:60
msgid "open/close for headers, lists, blockquotes, paragraphs, ..."
msgstr "打开/关闭标题、列表、分块引号、段落，......。"

#: ../../architecture.md:61
msgid "codes, fenced blocks, horizontal rules, html blocks, inlines containers"
msgstr "代码、栅栏式块、水平规则、HTML 块、内联式容器"

#: ../../architecture.md:62
msgid ""
"Each inline token have a `.children` property with a nested token stream "
"for inline content:"
msgstr ""
"每个内联标记都有一个 `.children` 属性，有一个内联内容的嵌套形符流："

#: ../../architecture.md:63
msgid "open/close for strong, em, link, code, ..."
msgstr "打开/关闭为 strong、em、link、code，..."

#: ../../architecture.md:64
msgid "text, line breaks"
msgstr "文本、换行"

#: ../../architecture.md:66
msgid ""
"Why not AST? Because it's not needed for our tasks. We follow KISS "
"principle. If you wish - you can call a parser without a renderer and "
"convert the token stream to an AST."
msgstr ""
"为什么不是 AST？因为我们的任务不需要它。"
"我们遵循 KISS 原则。"
"如果你愿意 -- 你可以调用一个没有渲染器的解析器，并将标记流转换为 AST。"

#: ../../architecture.md:70
msgid "More details about tokens:"
msgstr "关于形符的更多细节："

#: ../../architecture.md:72
msgid ""
"[Renderer source](https://github.com/executablebooks/markdown-it-"
"py/tree/master/markdown_it/renderer.py)"
msgstr ""
"[渲染器源码](https://github.com/executablebooks/markdown-it-"
"py/tree/master/markdown_it/renderer.py)"

#: ../../architecture.md:73
msgid ""
"[Token source](https://github.com/executablebooks/markdown-it-"
"py/tree/master/markdown_it/token.py)"
msgstr ""
"[形符源码](https://github.com/executablebooks/markdown-it-"
"py/tree/master/markdown_it/token.py)"

#: ../../architecture.md:74
msgid ""
"[Live demo](https://markdown-it.github.io/) - type your text and click "
"`debug` tab."
msgstr ""
"[实时演示](https://markdown-it.github.io/) - 键入你的文本并点击 `debug` tab。"

#: ../../architecture.md:77
msgid "Rules"
msgstr "规则"

#: ../../architecture.md:79
msgid ""
"Rules are functions, doing \"magic\" with parser `state` objects. A rule "
"is associated with one or more *chains* and is unique. For instance, a "
"`blockquote` token is associated with `blockquote`, `paragraph`, "
"`heading` and `list` chains."
msgstr ""

#: ../../architecture.md:81
msgid ""
"Rules are managed by names via [Ruler](https://markdown-it.github.io"
"/markdown-it/#Ruler) instances and can be  `enabled` / `disabled` from "
"the [MarkdownIt](https://markdown-it.github.io/markdown-it/#MarkdownIt) "
"methods."
msgstr ""

#: ../../architecture.md:83
msgid ""
"You can note, that some rules have a `validation mode` - in this mode "
"rules do not modify the token stream, and only look ahead for the end of "
"a token. It's one important design principle - a token stream is \"write "
"only\" on block & inline parse stages."
msgstr ""

#: ../../architecture.md:87
msgid ""
"Parsers are designed to keep rules independent of each other. You can "
"safely enable/disable them, or add new ones. There are no universal "
"recipes for how to create new rules - design of distributed state "
"machines with good data isolation is a tricky business. But you can "
"investigate existing rules & plugins to see possible approaches."
msgstr ""

#: ../../architecture.md:92
msgid ""
"Also, in complex cases you can try to ask for help in tracker. Condition "
"is very simple - it should be clear from your ticket, that you studied "
"docs, sources, and tried to do something yourself. We never reject with "
"help to real developers."
msgstr ""

#: ../../architecture.md:97
msgid "Renderer"
msgstr ""

#: ../../architecture.md:99
msgid ""
"After the token stream is generated, it's passed to a "
"[renderer](https://github.com/executablebooks/markdown-it-"
"py/tree/master/markdown_it/renderer.py). It then plays all the tokens, "
"passing each to a rule with the same name as token type."
msgstr ""

#: ../../architecture.md:102
msgid ""
"Renderer rules are located in `md.renderer.rules[name]` and are simple "
"functions with the same signature:"
msgstr ""

#: ../../architecture.md:110
msgid ""
"In many cases that allows easy output change even without parser "
"intrusion. For example, let's replace images with vimeo links to player's"
" iframe:"
msgstr ""

#: ../../architecture.md:137
msgid "Here is another example, how to add `target=\"_blank\"` to all links:"
msgstr ""

#: ../../architecture.md:153
msgid ""
"Note, if you need to add attributes, you can do things without renderer "
"override. For example, you can update tokens in `core` chain. That is "
"slower, than direct renderer override, but can be more simple."
msgstr ""

#: ../../architecture.md:157
msgid ""
"You also can write your own renderer to generate other formats than HTML,"
" such as JSON/XML... You can even use it to generate AST."
msgstr ""

#: ../../architecture.md:161
msgid "Summary"
msgstr ""

#: ../../architecture.md:163
msgid ""
"This was mentioned in [Data flow](#data-flow), but let's repeat sequence "
"again:"
msgstr ""

#: ../../architecture.md:165
msgid "Blocks are parsed, and top level of token stream filled with block tokens."
msgstr ""

#: ../../architecture.md:166
msgid "Content on inline containers is parsed, filling `.children` properties."
msgstr ""

#: ../../architecture.md:167
msgid "Rendering happens."
msgstr ""

#: ../../architecture.md:169
msgid ""
"And somewhere between you can apply additional transformations :) . Full "
"content of each chain can be seen on the top of "
"[parser_core.py](https://github.com/executablebooks/markdown-it-"
"py/tree/master/markdown_it/parser_core.py), "
"[parser_block.py](https://github.com/executablebooks/markdown-it-"
"py/tree/master/markdown_it/parser_block.py) and "
"[parser_inline.py](https://github.com/executablebooks/markdown-it-"
"py/tree/master/markdown_it/parser_inline.py) files."
msgstr ""

#: ../../architecture.md:176
msgid ""
"Also you can change output directly in "
"[renderer](https://github.com/executablebooks/markdown-it-"
"py/tree/master/markdown_it/renderer.py) for many simple cases."
msgstr ""

